#!/usr/bin/env python

'''
Copyright (C) 2021 Logistics and Supply Chain MultiTech R&D Centre <https://www.lscm.hk>
All Rights Reserved
Unauthorized copying of this file, via any medium is strictly prohibited
Proprietary and confidential
Written by Ben Liu <bjliu@lscm.hk>, December 2021

This code is to do calibration by rotation.
'''

from math import radians, copysign, pi
import rospy
from geometry_msgs.msg import Twist
from tf.transformations import euler_from_quaternion
import tf2_ros
from dynamic_reconfigure.server import Server   # for dynamic_reconfigure
from ada_test.cfg import CalibrateAngularConfig   # for dynamic_reconfigure

def normalize_angle(angle):
    res = angle
    while res > pi:
        res -= 2.0 * pi
    while res < -pi:
        res += 2.0 * pi
    return res

def callback(config, level):
    ''' trigger the dynamic reconfigure server '''
    rospy.loginfo("parameter changed.")
    return config

class CalibrateAngular:
    ''' main class '''
    def __init__(self):
        # Give the node a name
        rospy.init_node('calibrate_angular', anonymous=False)
        # Set rospy to execute a shutdown function when terminating the script
        rospy.on_shutdown(self.shutdown)
        # Setup for dynamic reconfigure
        rospy.loginfo("Bring up rqt_reconfigure to control the test.")
        Server(CalibrateAngularConfig, callback)

        # How fast will we check the odometry values?
        self.rate = rospy.get_param('~rate', 20)
        sleep_rate = rospy.Rate(self.rate)

        # The test angle is 360 degrees
        self.test_angle = radians(rospy.get_param('~test_angle', 360.0))

        self.speed = rospy.get_param('~speed', 0.3) # radians per second
        self.tolerance = radians(rospy.get_param('tolerance', 1)) # degrees converted to radians
        self.odom_angular_scale_correction = rospy.get_param('~odom_angular_scale_correction', 1.0)
        self.start_test = rospy.get_param('~start_test', False)

        # Publisher to control the robot's speed
        self.cmd_vel = rospy.Publisher('/cmd_vel', Twist, queue_size=5)

        # The base frame is usually base_link or base_footprint
        self.base_frame = rospy.get_param('~base_frame', 'base_link')

        # The odom frame is usually just /odom
        self.odom_frame = rospy.get_param('~odom_frame', 'odom')

        # Initialize the tf listener
        self.tfBuffer = tf2_ros.Buffer()
        self.listener = tf2_ros.TransformListener(self.tfBuffer)

        # Give tf some time to fill its buffer
        rospy.sleep(2)

        reverse = 1


        while not rospy.is_shutdown():
            if self.start_test:
                # Get the current rotation angle from tf
                self.odom_angle = self.get_odom_angle()

                last_angle = self.odom_angle
                turn_angle = 0
                self.test_angle *= reverse
                error = self.test_angle - turn_angle

                # Alternate directions between tests
                reverse = -reverse

                while abs(error) > self.tolerance and self.start_test:
                    if rospy.is_shutdown():
                        return
                    self.start_test = rospy.get_param('~start_test')

                    # Rotate the robot to reduce the error
                    move_cmd = Twist()
                    move_cmd.angular.z = copysign(self.speed, error)
                    self.cmd_vel.publish(move_cmd)
                    sleep_rate.sleep()

                    # Get the current rotation angle from tf
                    self.odom_angle = self.get_odom_angle()

                    # Compute how far we have gone since the last measurement
                    delta_angle = self.odom_angular_scale_correction * \
                        normalize_angle(self.odom_angle - last_angle)

                    # Add to our total angle so far
                    turn_angle += delta_angle

                    # Compute the new error
                    error = self.test_angle - turn_angle

                    # Store the current angle for the next comparison
                    last_angle = self.odom_angle

                # Stop the robot
                self.cmd_vel.publish(Twist())

                # Update the status flag
                self.start_test = False
            self.start_test = rospy.get_param('~start_test')
            rospy.sleep(5)

        # Stop the robot
        self.cmd_vel.publish(Twist())
        rospy.spin()

    def get_odom_angle(self):
        # Get the current transform between the odom and base frames
        try:
            trans = self.tfBuffer.lookup_transform(self.odom_frame, self.base_frame, rospy.Time())
            quaternion = [
                trans.transform.rotation.x, trans.transform.rotation.y,
                trans.transform.rotation.z, trans.transform.rotation.w
            ]
            return euler_from_quaternion(quaternion)[2]
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException,\
                tf2_ros.ExtrapolationException):
            rospy.loginfo("TF Exception")
            rospy.sleep(2)

        # Convert the rotation from a quaternion to an Euler angle
        return 0

    def shutdown(self):
        # Always stop the robot when shutting down the node
        rospy.loginfo("Stopping the robot...")
        self.cmd_vel.publish(Twist())

if __name__ == '__main__':
    try:
        rospy.loginfo("Initializing.")
        CalibrateAngular()

    except:
        rospy.loginfo("Calibration terminated.")
